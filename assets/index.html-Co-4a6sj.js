import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o,c,a as e,e as t,b as p,d as r}from"./app-BZE7C5UA.js";const i={},l=e("h3",{id:"怎么正确返回接口结果状态",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#怎么正确返回接口结果状态"},[e("span",null,"怎么正确返回接口结果状态？")])],-1),d=e("p",null,[t("大部分项目接口返回都会 "),e("code",null,"http"),t(" 状态码为 "),e("code",null,"200"),t(" ，但是这里是不推荐的。以 "),e("code",null,"PayPal"),t(" 为例，对于第三方支付来说 都是以返回不同的 "),e("code",null,"http"),t(" 状态码的。")],-1),u={href:"https://developer.paypal.com/api/rest/responses/",target:"_blank",rel:"noopener noreferrer"},m=r(`<h4 id="为什么要用这种方式-这样不会很麻烦吗" tabindex="-1"><a class="header-anchor" href="#为什么要用这种方式-这样不会很麻烦吗"><span>为什么要用这种方式，这样不会很麻烦吗？</span></a></h4><p>我以前也是喜欢 <code>200</code> 状态码进行一撸到底，然后再返回 <code>status</code> 进行区分接口是否成功请求。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这种做法我发现了存在致命的结果，那就是你在做接口自动化测试的时候，大部分测试都是成功的，因为自动化测试基本上 只会判断状态码是否符合。这样子就造成了要加很多逻辑去搞测试。而且这种做法会让 <code>nginx</code> 日志里的状态码全部为 <code>200</code>, 如果想要做一个简单的接口成功率统计的话也要侵入业务。</p>`,4);function h(g,_){const a=s("ExternalLinkIcon");return o(),c("div",null,[l,d,e("p",null,[e("a",u,[t("PayPal官方返回码文档"),p(a)])]),m])}const b=n(i,[["render",h],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/zh/basic/bestPractices/","title":"总结","lang":"zh-CN","frontmatter":{"title":"总结","index":true,"icon":"discover","sort":1,"description":"怎么正确返回接口结果状态？ 大部分项目接口返回都会 http 状态码为 200 ，但是这里是不推荐的。以 PayPal 为例，对于第三方支付来说 都是以返回不同的 http 状态码的。 PayPal官方返回码文档 为什么要用这种方式，这样不会很麻烦吗？ 我以前也是喜欢 200 状态码进行一撸到底，然后再返回 status 进行区分接口是否成功请求。 但...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/basic/bestPractices/"}],["meta",{"property":"og:site_name","content":"Rice-Code文档"}],["meta",{"property":"og:title","content":"总结"}],["meta",{"property":"og:description","content":"怎么正确返回接口结果状态？ 大部分项目接口返回都会 http 状态码为 200 ，但是这里是不推荐的。以 PayPal 为例，对于第三方支付来说 都是以返回不同的 http 状态码的。 PayPal官方返回码文档 为什么要用这种方式，这样不会很麻烦吗？ 我以前也是喜欢 200 状态码进行一撸到底，然后再返回 status 进行区分接口是否成功请求。 但..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-15T15:03:43.000Z"}],["meta",{"property":"article:author","content":"dengmf"}],["meta",{"property":"article:modified_time","content":"2024-10-15T15:03:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-15T15:03:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"dengmf\\",\\"url\\":\\"https://github.com/dmf-code\\"}]}"]]},"headers":[{"level":3,"title":"怎么正确返回接口结果状态？","slug":"怎么正确返回接口结果状态","link":"#怎么正确返回接口结果状态","children":[]}],"git":{"createdTime":1720104606000,"updatedTime":1729004623000,"contributors":[{"name":"dengminfeng","email":"1015814408@qq.com","commits":2}]},"readingTime":{"minutes":0.89,"words":267},"filePathRelative":"zh/basic/bestPractices/README.md","localizedDate":"2024年7月4日","autoDesc":true}');export{b as comp,f as data};
