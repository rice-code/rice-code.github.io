import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as e}from"./app-BCWIfWHd.js";const t={},p=e(`<h3 id="怎么正确使用-exception-类" tabindex="-1"><a class="header-anchor" href="#怎么正确使用-exception-类"><span>怎么正确使用 Exception 类？</span></a></h3><p><code>Basic</code> 包提供开箱即用的 <code>Exception</code> 类文件，一般情况下可以直接使用 <code>BizException</code> 这个业务异常类来实现 异常的抛出。如果是需要更丰富的类型，可以继承 <code>BaseException</code> 来实现。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Rice<span class="token punctuation">\\</span>Basic<span class="token punctuation">\\</span>Components<span class="token punctuation">\\</span>Exception</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Rice<span class="token punctuation">\\</span>Basic<span class="token punctuation">\\</span>Components<span class="token punctuation">\\</span>Enum<span class="token punctuation">\\</span>BizEnum</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">BizException</span> <span class="token keyword">extends</span> <span class="token class-name">BaseException</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">enumClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">BizEnum</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BaseException</code> 的实现类需要实现 <code>enumClass</code> 返回 <code>BaseEnum</code> 相关实现类，之后我们抛异常就可以这样子处理</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code>        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BizException</span><span class="token punctuation">(</span><span class="token class-name static-context">BizEnum</span><span class="token operator">::</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BizException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Business Error&#39;</span><span class="token punctuation">,</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点"><span>注意点</span></a></h3><p>错误返回必须通过异常进行处理，不推荐使用状态码一层层传递数据到控制器层，因为这里会加深犯错的成本，而且代码会深 度耦合起来。控制器层其实只会做 <code>service</code> 流程编排和异常捕获处理，把异常放在控制器层会使层级更加清晰。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code>        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BizException</span><span class="token punctuation">(</span><span class="token class-name static-context">BizEnum</span><span class="token operator">::</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BizException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name static-context">ClientErrorCode</span><span class="token operator">::</span><span class="token constant">CLIENT_ERROR</span><span class="token punctuation">,</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Throwable</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name static-context">ClientErrorCode</span><span class="token operator">::</span><span class="token constant">CLIENT_ERROR</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;系统出错&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用多层 <code>catch</code> 逻辑保证业务异常类直接返回异常信息内容，这里业务复杂的话还能在中间多加几个需要捕获的异常处理， 最后 <code>Throwable</code> 类兜底未预料到的错误。这里错误是不能够直接返回给用户的，所以只能是打日志的形式，然后返回<em><strong>系统出错</strong></em>就可以 了。</p>`,9),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(t,[["render",o],["__file","exception.html.vue"]]),k=JSON.parse('{"path":"/zh/basic/bestPractices/exception.html","title":"异常类","lang":"zh-CN","frontmatter":{"title":"异常类","index":true,"icon":"discover","description":"怎么正确使用 Exception 类？ Basic 包提供开箱即用的 Exception 类文件，一般情况下可以直接使用 BizException 这个业务异常类来实现 异常的抛出。如果是需要更丰富的类型，可以继承 BaseException 来实现。 BaseException 的实现类需要实现 enumClass 返回 BaseEnum 相关实现类...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/basic/bestPractices/exception.html"}],["meta",{"property":"og:site_name","content":"Rice-Code文档"}],["meta",{"property":"og:title","content":"异常类"}],["meta",{"property":"og:description","content":"怎么正确使用 Exception 类？ Basic 包提供开箱即用的 Exception 类文件，一般情况下可以直接使用 BizException 这个业务异常类来实现 异常的抛出。如果是需要更丰富的类型，可以继承 BaseException 来实现。 BaseException 的实现类需要实现 enumClass 返回 BaseEnum 相关实现类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-25T16:27:09.000Z"}],["meta",{"property":"article:author","content":"dengmf"}],["meta",{"property":"article:modified_time","content":"2023-08-25T16:27:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异常类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-25T16:27:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"dengmf\\",\\"url\\":\\"https://github.com/dmf-code\\"}]}"]]},"headers":[{"level":3,"title":"怎么正确使用 Exception 类？","slug":"怎么正确使用-exception-类","link":"#怎么正确使用-exception-类","children":[]},{"level":3,"title":"注意点","slug":"注意点","link":"#注意点","children":[]}],"git":{"createdTime":1692980829000,"updatedTime":1692980829000,"contributors":[{"name":"dengminfeng","email":"1015814408@qq.com","commits":1}]},"readingTime":{"minutes":1.27,"words":382},"filePathRelative":"zh/basic/bestPractices/exception.md","localizedDate":"2023年8月25日","autoDesc":true}');export{d as comp,k as data};
