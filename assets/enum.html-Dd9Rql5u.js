import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as e}from"./app-BCWIfWHd.js";const t={},p=e(`<h3 id="怎么正确使用-enum-类" tabindex="-1"><a class="header-anchor" href="#怎么正确使用-enum-类"><span>怎么正确使用 Enum 类？</span></a></h3><p><code>Basic</code> 包提供开箱即用的 <code>Enum</code> 类文件，一般情况下可以直接使用 <code>BizEnum</code> 这个业务枚举类来实现 异常的抛出。如果是需要更丰富的类型，可以继承 <code>BaseEnum</code> 来实现。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Rice<span class="token punctuation">\\</span>Basic<span class="token punctuation">\\</span>Components<span class="token punctuation">\\</span>Enum</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">BizEnum</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEnum</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@en</span> Business Error
     * <span class="token keyword">@zh-CN</span> 业务错误
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token keyword">DEFAULT</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;default&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多语言这里采用的是注释的形式进行获取，枚举类是强绑定在异常类的，所以正常情况下要抛出异常，通常是以下的方式进行</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BizException</span><span class="token punctuation">(</span><span class="token class-name static-context">BizEnum</span><span class="token operator">::</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BizException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id是必传项&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自定义信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就会底层自动拿到注释内容作为异常信息抛出，这里也可以不使用 <code>BizEnum::DEFAULT</code> 的形式，直接写入自定义的 信息也是可以的，不过这样子是不太推荐的。这样直接使用异常信息抛出就会缺少多语言的功能，如果项目不考虑的话，那这 样子的用法也是能接受的。</p><p>枚举类提供有获取所有常量的静态方法</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token class-name static-context">BizEnum</span><span class="token operator">::</span><span class="token function">getConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有常量</span>
<span class="token class-name static-context">BizEnum</span><span class="token operator">::</span><span class="token function">getParentConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取父类所有常量</span>
<span class="token class-name static-context">BizEnum</span><span class="token operator">::</span><span class="token function">getChildConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取当前类所有常量（所有常量 - 父类常量）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),c=[p];function o(i,l){return s(),a("div",null,c)}const u=n(t,[["render",o],["__file","enum.html.vue"]]),m=JSON.parse('{"path":"/zh/basic/bestPractices/enum.html","title":"枚举类","lang":"zh-CN","frontmatter":{"title":"枚举类","index":true,"icon":"discover","description":"怎么正确使用 Enum 类？ Basic 包提供开箱即用的 Enum 类文件，一般情况下可以直接使用 BizEnum 这个业务枚举类来实现 异常的抛出。如果是需要更丰富的类型，可以继承 BaseEnum 来实现。 多语言这里采用的是注释的形式进行获取，枚举类是强绑定在异常类的，所以正常情况下要抛出异常，通常是以下的方式进行 这里就会底层自动拿到注释内容...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/basic/bestPractices/enum.html"}],["meta",{"property":"og:site_name","content":"Rice-Code文档"}],["meta",{"property":"og:title","content":"枚举类"}],["meta",{"property":"og:description","content":"怎么正确使用 Enum 类？ Basic 包提供开箱即用的 Enum 类文件，一般情况下可以直接使用 BizEnum 这个业务枚举类来实现 异常的抛出。如果是需要更丰富的类型，可以继承 BaseEnum 来实现。 多语言这里采用的是注释的形式进行获取，枚举类是强绑定在异常类的，所以正常情况下要抛出异常，通常是以下的方式进行 这里就会底层自动拿到注释内容..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-31T15:56:52.000Z"}],["meta",{"property":"article:author","content":"dengmf"}],["meta",{"property":"article:modified_time","content":"2023-08-31T15:56:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"枚举类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-31T15:56:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"dengmf\\",\\"url\\":\\"https://github.com/dmf-code\\"}]}"]]},"headers":[{"level":3,"title":"怎么正确使用 Enum 类？","slug":"怎么正确使用-enum-类","link":"#怎么正确使用-enum-类","children":[]}],"git":{"createdTime":1693497412000,"updatedTime":1693497412000,"contributors":[{"name":"dengminfeng","email":"1015814408@qq.com","commits":1}]},"readingTime":{"minutes":1.12,"words":336},"filePathRelative":"zh/basic/bestPractices/enum.md","localizedDate":"2023年8月31日","autoDesc":true}');export{u as comp,m as data};
