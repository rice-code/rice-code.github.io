import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,d as e}from"./app-BCWIfWHd.js";const t={},c=e(`<h3 id="怎么正确使用-dto-类" tabindex="-1"><a class="header-anchor" href="#怎么正确使用-dto-类"><span>怎么正确使用 DTO 类？</span></a></h3><p><code>Basic</code> 包提供开箱即用的 <code>DTO</code> 类文件，<code>Response</code> 类是一个返回对象的 <code>DTO</code> ，使用这个类可以保证我们的如果是 需要更丰富的类型，可以继承 <code>BaseDTO</code> 来实现。</p><p>比如现在可以定义一个用户登录 <code>UserDTO</code>:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>DTO</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Rice<span class="token punctuation">\\</span>Basic<span class="token punctuation">\\</span>Components<span class="token punctuation">\\</span>DTO<span class="token punctuation">\\</span>BaseDTO</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Rice<span class="token punctuation">\\</span>Basic<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>AutoFillProperties</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@method</span> self setAccount(string $value)
 * <span class="token keyword">@method</span> string getAccount()
 * <span class="token keyword">@method</span> self setPassword(string $value)
 * <span class="token keyword">@method</span> string getPassword()
 */</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserDTO</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDTO</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">AutoFillProperties</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">string</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token variable">$account</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$password</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的注释可以使用 <code>rice/ctl</code> 包的自动生成命令，只要按照上面定义好类属性就行。高版本 <code>php</code> 可以直接使用类型 限制，低版本就使用 <code>@var</code> 注释进行类型绑定，这样子才能知道类注释生成的类型。</p><h3 id="参数自动填充" tabindex="-1"><a class="header-anchor" href="#参数自动填充"><span>参数自动填充</span></a></h3><p>这里为了方便为 <code>DTO</code> 赋值，所以会 <code>use AutoFillProperties;</code> 引入自动绑定属性参数值。像下面这样</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$dto</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>前端传的参数可以是下划线 <code>a_b</code> 或者是驼峰 <code>aB</code> 这两种情况，自动填充参数就会把下划线 <code>a_b</code> 转为 <code>aB</code> 的形式， 所以前端传值更加灵活，后端也不用关注 <code>DTO</code> 赋值的问题，只要保持和前端传参一致就行。</p></blockquote><h3 id="属性获取" tabindex="-1"><a class="header-anchor" href="#属性获取"><span>属性获取</span></a></h3><p><code>BaseDTO</code> 默认使用 <code>use Accessor</code> <code>trait</code> 类进行参数获取，避免 <code>DTO</code> 类属性暴露。</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Rice<span class="token punctuation">\\</span>Basic<span class="token punctuation">\\</span>Components<span class="token punctuation">\\</span>DTO</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Rice<span class="token punctuation">\\</span>Basic<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>Accessor</span><span class="token punctuation">;</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">BaseDTO</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Accessor</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$dto</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dto</span><span class="token operator">-&gt;</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// account属性值获取</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认 <code>BaseDTO</code> 是允许 <code>getting</code> 和 <code>setting</code> 的，如果你要所有 <code>DTO</code> 只允许内部进行赋值，那就可以把 <code>setting</code> 禁掉。只要在相关的 <code>DTO</code> 类再引入一个 <code>use Getter;</code> 就只允许使用 <code>get</code> 函数了，这样子的好处就是类的属性修改 只在内部发生，避免 <code>DTO</code> 逻辑上到处赋值。</p>`,14),p=[c];function o(i,l){return n(),a("div",null,p)}const u=s(t,[["render",o],["__file","dto.html.vue"]]),k=JSON.parse('{"path":"/zh/basic/bestPractices/dto.html","title":"DTO类","lang":"zh-CN","frontmatter":{"title":"DTO类","index":true,"icon":"discover","description":"怎么正确使用 DTO 类？ Basic 包提供开箱即用的 DTO 类文件，Response 类是一个返回对象的 DTO ，使用这个类可以保证我们的如果是 需要更丰富的类型，可以继承 BaseDTO 来实现。 比如现在可以定义一个用户登录 UserDTO: 这里的注释可以使用 rice/ctl 包的自动生成命令，只要按照上面定义好类属性就行。高版本 ph...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/basic/bestPractices/dto.html"}],["meta",{"property":"og:site_name","content":"Rice-Code文档"}],["meta",{"property":"og:title","content":"DTO类"}],["meta",{"property":"og:description","content":"怎么正确使用 DTO 类？ Basic 包提供开箱即用的 DTO 类文件，Response 类是一个返回对象的 DTO ，使用这个类可以保证我们的如果是 需要更丰富的类型，可以继承 BaseDTO 来实现。 比如现在可以定义一个用户登录 UserDTO: 这里的注释可以使用 rice/ctl 包的自动生成命令，只要按照上面定义好类属性就行。高版本 ph..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-01T06:05:29.000Z"}],["meta",{"property":"article:author","content":"dengmf"}],["meta",{"property":"article:modified_time","content":"2023-09-01T06:05:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DTO类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-01T06:05:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"dengmf\\",\\"url\\":\\"https://github.com/dmf-code\\"}]}"]]},"headers":[{"level":3,"title":"怎么正确使用 DTO 类？","slug":"怎么正确使用-dto-类","link":"#怎么正确使用-dto-类","children":[]},{"level":3,"title":"参数自动填充","slug":"参数自动填充","link":"#参数自动填充","children":[]},{"level":3,"title":"属性获取","slug":"属性获取","link":"#属性获取","children":[]}],"git":{"createdTime":1693497412000,"updatedTime":1693548329000,"contributors":[{"name":"dengminfeng","email":"1015814408@qq.com","commits":2}]},"readingTime":{"minutes":1.61,"words":482},"filePathRelative":"zh/basic/bestPractices/dto.md","localizedDate":"2023年8月31日","autoDesc":true}');export{u as comp,k as data};
